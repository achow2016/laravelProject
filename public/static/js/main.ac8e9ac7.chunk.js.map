{"version":3,"sources":["components/NewPost.js","components/Post.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["NewPost","props","handleTitle","event","setState","title","target","value","handleComment","comment","handlePriority","priority","state","submitPost","bind","fetch","method","headers","body","JSON","stringify","this","className","placeholder","username","disabled","name","onChange","rows","onClick","Component","Post","handleDelete","id","console","log","border","alt","src","picture","author","Body","getUser","dataType","then","resp","json","data","user","getPosts","posts","refreshPosts","length","map","post","index","key","author_picture","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac8e9ac7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NewPost extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            comment: '',\n            priority: 1,\n        };\n\n        this.submitPost = this.submitPost.bind(this);\n        this.handleTitle = this.handleTitle.bind(this);\n        this.handleComment = this.handleComment.bind(this);\n        this.handlePriority = this.handlePriority.bind(this);\n    };\n\n    handleTitle = (event) => {\n        this.setState({title: event.target.value});\n    };\n\n    handleComment = (event) => {\n        this.setState({comment: event.target.value});\n    };\n\n    handlePriority = (event) => {\n        this.setState({priority: event.target.value});\n    };\n\n    submitPost() {\n        fetch('/posts/create', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                title: this.state.title,\n                comment: this.state.comment,\n                priority: this.state.priority,\n            })\n        });\n    };\n\n    render() {\n        return (\n            <div >\n                <div className=\"form-group\">\n                    <input className=\"form-control\" placeholder=\"\" value={this.props.username} disabled/>\n                </div>\n                <div className=\"form-group\">\n                    <label>Title</label>\n                    <input className=\"form-control\" placeholder=\"\" name=\"title\" onChange={this.handleTitle} />\n                </div>\n                <div className=\"form-group\">\n                    <label>Comment</label>\n                    <textarea className=\"form-control\" rows=\"3\" name=\"comment\" onChange={this.handleComment}/>\n                </div>\n                <div className=\"form-group\">\n                    <label>Priority</label>\n                    <select className=\"form-control\" name=\"priority\" onChange={this.handlePriority}>\n                        <option value=\"1\">Important</option>\n                        <option value=\"2\">High</option>\n                        <option value=\"3\">Normal</option>\n                    </select>\n                </div>\n                <div className=\"text-right\">\n                    <button className=\"btn btn-outline-dark\" onClick={this.submitPost}>Submit Post!</button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default NewPost;\n","import React, { Component } from 'react';\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleDelete = (id) => {\n        console.log(\"deleting \" + id);\n    };\n\n    render() {\n\n        let border = 'card';\n\n        if (this.props.priority == '1') {\n            border = 'card border-danger'\n        } else if(this.props.priority == '2') {\n            border = 'card border-warning'\n        } else if(this.props.priority == '3') {\n            border = 'card border-info'\n        }\n\n        return (\n            <div className={border}>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{this.props.title}</h5>\n                        <p className=\"card-text\">\n                            {this.props.comment}\n                        </p>\n                    </div>\n                    <ul className=\"list-group list-group-flush\">\n                    </ul>\n                    <div className=\"card-body text-right\">\n                        <li className=\"list-group-item\">\n                            <img alt=\"\" className=\"img img-thumbnail\" src={this.props.picture}/>\n                            <div className=\"\">\n                                 {this.props.author}\n                            </div>\n                        </li>\n                        {/*<button className=\"btn btn-outline-dark\" href=\"#\" onClick={() => this.handleDelete(this.props.id)}>*/}\n                        {/*    <i className=\"fa fa-trash\"></i> Delete*/}\n                        {/*</button>*/}\n                    </div>\n            </div>\n        )\n    }\n}\nexport default Post;\n","import React, { Component } from 'react';\nimport NewPost from \"./NewPost\";\nimport Post from \"./Post\";\n\nclass Body extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {user: {name: 'John Doe', picture: ''}, posts: []};\n\n        this.refreshPosts = this.refreshPosts.bind(this);\n        // this.getUser = this.getUser.bind(this);\n        // this.getPosts = this.getPosts.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPosts();\n        this.getUser();\n    }\n\n    getUser = () => {\n        fetch('/user', {\n            method: 'GET',\n            dataType: \"JSON\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        }).then((resp) => {\n                return resp.json()\n        }).then((data) => {\n                this.setState({ user: data.user })\n        });\n    };\n\n    getPosts = () => {\n        fetch('/posts', {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        }).then((resp) => {\n            return resp.json()\n        }).then((data) => {\n            this.setState({ posts: data.posts })\n        });\n    };\n\n    refreshPosts = () => {\n        this.setState({\n            posts: []\n        });\n\n        this.getPosts();\n    };\n\n    render() {\n        return <div className=\"row\">\n            <div className=\"col-md-3\">\n                <br/>\n                <p>\n                    <img alt=\"\" className=\"img img-thumbnail\" src={this.state.user.picture}/>\n                </p>\n                <h3>{this.state.user.name}</h3>\n            </div>\n            <div className=\"col-md-6 text-left\">\n                <h2 className=\"text-center\">\n                    Posts <button className=\"btn btn-outline-dark\" onClick={this.refreshPosts}><i className=\"fas fa-sync-alt\"/> </button>\n                </h2>\n                <br/>\n                <div className=\"posts-box\">\n                    {this.state.posts && this.state.posts.length > 0 ? this.state.posts.map((post, index) => (\n                        <div key={index}>\n                            <Post\n                                  id={post.id}\n                                  title={post.title}\n                                  comment={post.comment}\n                                  priority={post.priority}\n                                  author={post.author}\n                                  picture={post.author_picture}\n                            />\n                            <br/>\n                        </div>\n                        )) :\n                        <div className=\"text-center\">\n                            <p>No posts found.</p>\n                        </div>\n                    }\n                </div>\n            </div>\n            <div className=\"col-md-3 text-left\">\n                <div className=\"text-center\">\n                    <h2>New Post</h2>\n                </div>\n                <br/>\n                <NewPost username={this.state.user.name}/>\n            </div>\n        </div>\n    }\n}\nexport default Body;\n","import React from 'react';\nimport Body from './components/Body';\nimport './App.css';\n\nfunction App() {\n\n    return (\n        <div className=\"flex-center position-ref full-height\">\n            <div className=\"content container\">\n                <div className=\"title m-b-md\">\n                    COMP 4669\n                </div>\n                <div className=\"links\">\n                    <a href=\"/logout\">logout</a>\n                </div>\n                <hr/>\n                <Body />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}